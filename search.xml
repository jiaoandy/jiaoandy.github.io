<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>首页</title>
    <url>/2025/09/07/home/</url>
    <content><![CDATA[<p>欢迎来到我的博客，这里会不定时分享一些题解，并存放一些我的生活碎片，谢谢支持！</p>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>我是谁？<br>一名吉林大学软件工程专业的23级普通学生，致力于提升自己技术水平，将分享不同OJ的题解，机器学习相关内容。<br>有时候也会有一些生活上的分享哦！</p>
<h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><ul>
<li>邮箱：<a href="mailto:&#x6a;&#x69;&#x61;&#x6f;&#121;&#x63;&#53;&#x35;&#50;&#51;&#x40;&#x6d;&#x61;&#105;&#108;&#115;&#46;&#x6a;&#x6c;&#117;&#x2e;&#101;&#x64;&#x75;&#46;&#99;&#110;">jiaoyc5523@mails.jlu.edu.cn</a></li>
<li>csdn: <a href="https://blog.csdn.net/2302_76409391?spm=1000.2115.3001.5343">个人主页</a></li>
<li>QQ: 197566706</li>
</ul>
<h6 id="如果你乐意分享这篇内容，我会非常感谢！"><a href="#如果你乐意分享这篇内容，我会非常感谢！" class="headerlink" title="如果你乐意分享这篇内容，我会非常感谢！"></a>如果你乐意<span class="share" style="color: #165DFF; cursor: pointer; text-decoration: underline; margin: 0 4px;">分享</span>这篇内容，我会非常感谢！</h6><!-- 弹窗元素 -->
<div id="copyPopup" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 0, 0, 0.8); color: white; padding: 12px 24px; border-radius: 6px; opacity: 0; transition: opacity 0.3s ease-in-out; pointer-events: none; font-size: 14px; z-index: 9999;">
  已复制到剪贴板
</div>

<script>
// 设置要复制的链接
const shareLink = 'https://jiaoandy.github.io/';

// 获取元素
const shareBtn = document.querySelector('.share');
const popup = document.getElementById('copyPopup');

// 点击事件处理
shareBtn.addEventListener('click', () => {
  // 复制链接到剪贴板
  navigator.clipboard.writeText(shareLink).then(() => {
    // 显示弹窗
    popup.style.opacity = '1';
    
    // 2秒后隐藏弹窗
    setTimeout(() => {
      popup.style.opacity = '0';
    }, 1000);
  }).catch(err => {
    console.error('复制失败:', err);
  });
});
</script>

]]></content>
  </entry>
  <entry>
    <title>已接入评论功能！</title>
    <url>/2025/09/07/%E5%B7%B2%E6%8E%A5%E5%85%A5%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%81/</url>
    <content><![CDATA[<h1 id="已接入评论功能啦！本站评论功能基于-utterances实现-登录github账号即可发布评论。快留下你宝贵的评论吧！"><a href="#已接入评论功能啦！本站评论功能基于-utterances实现-登录github账号即可发布评论。快留下你宝贵的评论吧！" class="headerlink" title="已接入评论功能啦！本站评论功能基于 utterances实现,登录github账号即可发布评论。快留下你宝贵的评论吧！"></a>已接入评论功能啦！本站评论功能基于 <a href="https://utteranc.es/">utterances</a>实现,登录github账号即可发布评论。快留下你宝贵的评论吧！</h1>]]></content>
      <categories>
        <category>公告</category>
      </categories>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
  <entry>
    <title>算法训练|LeetCode 142. 环形链表 II（Floyd判圈）|能否用系数k自适应快慢指针差值|Brent方法</title>
    <url>/2025/09/07/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-Day3-LeetCode-142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8-II%EF%BC%88Floyd%E5%88%A4%E5%9C%88%EF%BC%89-%E8%83%BD%E5%90%A6%E7%94%A8%E7%B3%BB%E6%95%B0k%E8%87%AA%E9%80%82%E5%BA%94%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88%E5%B7%AE%E5%80%BC-Brent%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="LeetCode-142-环形链表-II"><a href="#LeetCode-142-环形链表-II" class="headerlink" title="LeetCode 142.环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">LeetCode 142.环形链表 II</a></h1><span id="more"></span>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>不允许修改 链表。<br>示例 1：</p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="图1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>
<p>示例 2：<br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt="图2"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>
<p>示例 3：<br><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt="图3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题分为两步，判断是否有环和寻找环的入口。</p>
<p>判断是否有环的阶段使用了非常经典的快慢指针方法，设立两个指针fast和slow，fast指针移动两格，slow指针移动一格。当它们相遇则说明有环。</p>
<p>想象带环链表中的环是操场，其他部分是教学楼到操场的距离，如果甲乙同学同时下楼，v甲&#x3D;2v乙，那么甲乙相遇说明一定有操场，很好理解。</p>
<p>接着寻找环的入口。</p>
<p>设表头到环入口距离为a</p>
<p>环入口到两指针相遇位置距离为b</p>
<p>环长度为L</p>
<p>相遇时慢指针走的距离为s(快指针为2s)</p>
<p>可以得出，a+b&#x3D;s,a+b+kL&#x3D;2s（k为快指针绕环的圈数）</p>
<p>那么2(a+b)&#x3D;a+b+kL</p>
<p>a&#x3D;kL-b</p>
<p>也就是从相遇点走a步相当于绕环k-1圈再走L-b步</p>
<p>所以可以将一个指针转移回头节点，另一个指针同步从相遇点出发，两指针再相遇的位置就是环的入口。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast=head;</span><br><span class="line">        ListNode* slow=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(fast==slow)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* temp1=fast;</span><br><span class="line">                ListNode* temp2=head;</span><br><span class="line">                <span class="keyword">while</span>(temp1!=temp2)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp1=temp1-&gt;next;</span><br><span class="line">                    temp2=temp2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> temp1;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="为什么快指针是慢指针的2倍速度"><a href="#为什么快指针是慢指针的2倍速度" class="headerlink" title="为什么快指针是慢指针的2倍速度"></a>为什么快指针是慢指针的2倍速度</h2><p>快指针移动两格，慢指针移动一个，这是为什么？能不能三倍速度？能不能定义自适应系数k来改进？</p>
<p>首先证明快指针走三格，慢指针走一格不可行。举一个例子，首先假设慢指针进入环的时候，快指针与慢指针的距离为D，如果环大小L为4，D为1</p>
<p>第一次移动：慢指针进 1，快指针进 3，新距离 (1+2)mod  4&#x3D;3(1+2)mod4&#x3D;3。</p>
<p>第二次移动：慢指针进 1，快指针进 3，新距离 (3+2)mod  4&#x3D;1(3+2)mod4&#x3D;1。</p>
<p>距离在 1 和 3 间循环，永不相遇。</p>
<p>由此可见，如果 L 是偶数且 D 是奇数，则距离序列（如 D,D+2,D+4,…mod  LD,D+2,D+4,…modL) 始终为奇数，无法达到 0（偶数），导致指针循环而不相遇。</p>
<h2 id="设置自适应系数k"><a href="#设置自适应系数k" class="headerlink" title="设置自适应系数k?"></a>设置自适应系数k?</h2><p>由于不知道链表长度，我们没办法安排一个k来进行优化，但是再判断是否有环的阶段，我们可以进行优化。</p>
<h2 id="Brent判圈"><a href="#Brent判圈" class="headerlink" title="Brent判圈"></a>Brent判圈</h2><p>慢指针：每次移动一步</p>
<p>快指针：初始步长为step_limit&#x3D;1，每次移动step_limit后，检查是否和慢指针相遇，如果没有相遇，step_limit*&#x3D;2，并将慢指针移动到快指针的位置，直到快指针到达链表尾（无环）或者快慢指针相遇（有环）</p>
<p>Brent 算法通过动态步长优化了检测效率，特别是在无环或大环链表上性能更优，同时保持了 Floyd 算法的线性时间复杂度。</p>
<h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="literal">NULL</span> || head-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="type">int</span> step_limit = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (fast!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">                <span class="comment">// 计算环长度</span></span><br><span class="line">                <span class="type">int</span> cycle_len = <span class="number">1</span>;</span><br><span class="line">                ListNode* scanner = fast-&gt;next;</span><br><span class="line">                <span class="keyword">while</span> (scanner != slow) &#123;</span><br><span class="line">                    scanner = scanner-&gt;next;</span><br><span class="line">                    cycle_len++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 寻找环入口</span></span><br><span class="line">                ListNode* ptr1 = head;</span><br><span class="line">                ListNode* ptr2 = head;</span><br><span class="line">                <span class="comment">// 先将ptr2移动环长度步数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cycle_len; i++) &#123;</span><br><span class="line">                    ptr2 = ptr2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 两指针同时移动直到相遇</span></span><br><span class="line">                <span class="keyword">while</span> (ptr1 != ptr2) &#123;</span><br><span class="line">                    ptr1 = ptr1-&gt;next;</span><br><span class="line">                    ptr2 = ptr2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ptr1;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (steps == step_limit) &#123;</span><br><span class="line">                slow = fast;</span><br><span class="line">                step_limit *= <span class="number">2</span>;</span><br><span class="line">                steps = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            steps++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">// 无环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法训练 - 链表 - 双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>算法训练|LeetCode 209. 长度最小的子数组</title>
    <url>/2025/09/07/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-LeetCode-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="LeetCode-209-长度最小的子数组"><a href="#LeetCode-209-长度最小的子数组" class="headerlink" title="LeetCode 209.长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">LeetCode 209.长度最小的子数组</a></h1><span id="more"></span>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>
<p>找出该数组中满足其总和大于等于 target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。<br>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<p>1 &lt;&#x3D; target &lt;&#x3D; 109<br>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[i] &lt;&#x3D; 104</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>滑动窗口问题，暴力算法：</p>
<p>定义左指针和右指针，右指针从头遍历到尾部，左指针接着遍历，时间复杂度为，超时。</p>
<p>滑动窗口算法（双指针）：</p>
<p>本题重要的是不用二重循环解决问题。刚开始思考本题，很难想到解决方法，那么分步骤思考：</p>
<pre><code>1.为什么时间复杂度高？   答：有重复遍历。

2.哪里重复遍历了？   答：如果右指针没有遍历到数组尾部时，就已经出现了实际上的最短数组，那么接下来的右指针遍历均为无效遍历（左指针遍历分为n层，在某一层出现的情况）

3.如何解决？   答：把右指针卡住。换种说法，由于右指针向右遍历是越来越长的，所以会有无效遍历，那么如果目标数组（窗口）越来越短，是不是就会减少无效遍历了呢？
</code></pre>
<p><strong>如何保证目标数组保持短小？</strong></p>
<p><strong>如果右指针向右遍历，左指针不动，而当左右指针之间的目标数组达到目标值时，左指针再向右移动，即可保证目标数组长度最小。</strong></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">// 起始位置</span></span><br><span class="line">        <span class="type">int</span> result = INT32_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">                length = j - i + <span class="number">1</span>;</span><br><span class="line">                result = <span class="built_in">min</span>(result, length);</span><br><span class="line">                sum -= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result == INT32_MAX) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>要点一：result需要提前设置成最大值，这样在选取目标数组时比较大小才会越来越小。</p>
<p>要点二：while语句部分，刚开始写的时候会思考，应该写if？还是while?</p>
<pre><code>    有一种情况：当右指针固定，左指针移动时，连续移动几个都没有到目标值，这个时候右指针没有向右移动（没有进入for循环语句），因此需要加循环保证result值一直减小直到小于等于目标值target。
</code></pre>
<p>##总结：<br>滑动窗口本质上是一个双指针问题，结合队列的思想：窗口内部看作一个队列，不要的值从左面出去，难点在于把二重循环转化成单个循环。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法训练 - 数组 - 双指针 - 滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>算法训练|离散化|区间和（前缀和）</title>
    <url>/2025/09/07/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E7%A6%BB%E6%95%A3%E5%8C%96-%E5%8C%BA%E9%97%B4%E5%92%8C%EF%BC%88%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目：区间和"><a href="#题目：区间和" class="headerlink" title="题目：区间和"></a>题目：区间和</h1><p>原题链接：<a href="https://www.acwing.com/file_system/file/content/whole/index/content/4330/">802. 区间和 - AcWing题库</a> </p>
<span id="more"></span>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。</p>
<p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p>
<p>接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。</p>
<p>输入格式<br>第一行包含两个整数 n 和 m。</p>
<p>接下来 n 行，每行包含两个整数 x 和 c。</p>
<p>再接下来 m 行，每行包含两个整数 l 和 r。</p>
<p>输出格式<br>共 m 行，每行输出一个询问中所求的区间内数字和。</p>
<p>数据范围<br>−109≤x≤109,<br>1≤n,m≤105,<br>−109≤l≤r≤109,<br>−10000≤c≤10000<br>输入样例：<br>3 3<br>1 2<br>3 6<br>7 5<br>1 3<br>4 6<br>7 8<br>输出样例：<br>8<br>0<br>5</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先插入数据，不赘述了，一层循环插入即可。</p>
<p>接下来进行查询求和输出操作。</p>
<h4 id="分为两步"><a href="#分为两步" class="headerlink" title="分为两步"></a>分为两步</h4><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p>我们需要在无限长的数轴上查询到 l 和 r 两个数，此时可以用到二分查找的方式。</p>
<p>但是我们发现一个问题，数轴是无限长度，我们不可能开出一个极大的数组来进行二分，太耗费空间和时间了。因此我们引出了另一个知识点：<strong>离散化</strong></p>
<h4 id="什么是离散化"><a href="#什么是离散化" class="headerlink" title="什么是离散化"></a>什么是离散化</h4><p>离散化是将一个数列中的元素映射到一个较小范围内的整数的过程。它通过将原始数据中的每个唯一值替换为一个新的整数值，从而减少了数据的范围和复杂度。简单来讲，就是在不改变原有数组相对大小的基础上，将分散开的数整合到一个相对较小的数组中。这道题中，我们需要将无限长的数组里面后插入的数离散化，以便于查找目标区间的左右边界。（映射）</p>
<h4 id="离散化的步骤"><a href="#离散化的步骤" class="headerlink" title="离散化的步骤"></a>离散化的步骤</h4><p>首先开一个数组（容器），把输入的数写进去，然后再遍历一下里面的数，把数和对应的新下标存入一个新数组（容器）中。可以通过a[n]&#x3D;m(n是新下标，m是数)来存入离散化后的新数组；也可以用容器。这里为了方便遍历，我们开一个vector</p>
<p>现在开始离散化</p>
<p>先给出一开始输入数据时的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//typedef pair&lt;int, int&gt; PII;//第一个int下标，第二个int存数</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; alls;</span></span><br><span class="line"><span class="comment">//vector&lt;PII&gt;	add；</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//读取插入操作</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x, c;</span><br><span class="line">	cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">	add.<span class="built_in">push_back</span>(&#123; x,c &#125;);</span><br><span class="line"> </span><br><span class="line">	alls.<span class="built_in">push_back</span>(x);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)<span class="comment">//读取查询操作</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> l, r;</span><br><span class="line">		</span><br><span class="line">	cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"> </span><br><span class="line">	alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">	alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时all里面是所有出现过的位置（包括插入数在数轴上的坐标和想要查询的区间的左右边界坐标）</p>
<p>比如，输入如下：</p>
<p>2 1    &#x2F;&#x2F; n&#x3D;2次操作, m&#x3D;1次查询<br>1 5    &#x2F;&#x2F; 位置1加5<br>3 7    &#x2F;&#x2F; 位置3加7<br>1 3    &#x2F;&#x2F; 查询[1,3]的和</p>
<p>那么此时all:[1,3,1,3]</p>
<p>现在如果想要开始离散化，我们会发现一个问题，当我想要找“1”这个坐标在all里面的位置时，会出现两个返回值，并且如果数据很大，无序的all没有办法进行二分查找。因此我们需要给all进行排序和去重操作。</p>
<p>先讲一下为什么要找“1”在all里面的位置。当我们在给数据进行离散化的时候，步骤是这样的：</p>
<p><strong>1.建立一个数据类型为整数有序对的vector容器，把插入数据的位置和数值分别放入这个有序对中</strong></p>
<p><strong>2.再建立一个离散化后的目标数组，把插入数据的位置依次安在这个目标数组中，比如之前的例子，第一个位置“1”映射0，第二个位置“3”映射1</strong></p>
<p>因此，我们必须把原始位置排好序并查找，以便于直接安在后定义的离散化后的目标数组中（下标依次加一）</p>
<p>好，现在开始排序去重：</p>
<p>在vector里面右两个函数，erase和unique。</p>
<p>A.erase(A.begin,A.end)表示删掉从begin位置到end位置的数。</p>
<p>A.unique(A.begin,A.end)返回去重后最后一个不重复元素的下标。</p>
<p>排序去重代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());<span class="comment">//去重</span></span><br></pre></td></tr></table></figure>
<p>这样all里面的值就是[1,3]。</p>
<p>样例数太少，我们换一个例子。假设去重后all：[1,3,5,7,9]</p>
<p>接下来需要进行映射。</p>
<p>重新看一下离散化的步骤，需要依次把all的数进行映射，“1”映射到“0”，“3”映射到“1”以此类推。</p>
<p>写一个find函数，进行二分查找</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//二分查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r ;<span class="comment">//这里有个小问题需要注意，下面修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时向离散化后的目标数组中插入对应数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> item : add)<span class="comment">//把将要插入的数插进去</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">find</span>(item.first);</span><br><span class="line">		a[x] += item.second;</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>x本质上就是all中对应数的下标（原始数下标的下标，你甚至可以理解为二重指针）</strong></p>
<h3 id="区间和"><a href="#区间和" class="headerlink" title="区间和"></a>区间和</h3><p>简单来说就是新开一个数组，从第一个数到最后一个数分别是前面数的累加，最后在求区间和的时候只需要在新开的数组上进行简单运算就行了。</p>
<p>这里借用<a href="https://programmercarl.com/kamacoder/0058.%E5%8C%BA%E9%97%B4%E5%92%8C.html#%E6%80%9D%E8%B7%AF">代码随想录的讲解，十分清晰</a></p>
<p>但是我们发现一个问题，区间和的运算中，第一个下标需要从1开始进行，这样不会出现</p>
<p>s[find(1)-1] &#x2F;&#x2F; 可能变成s[-1]!   这种尴尬的情况（s是累加后的前缀和数组）</p>
<p>所以前面的find函数需要改正：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//二分查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r + <span class="number">1</span> ;<span class="comment">//返回的是新数组的下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回值变成r+1</p>
<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"> </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存入所有需要离散化的数</span></span><br><span class="line">vector&lt;PII&gt;	add, query;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//二分查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, c;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">		add.<span class="built_in">push_back</span>(&#123; x,c &#125;);</span><br><span class="line"> </span><br><span class="line">		alls.<span class="built_in">push_back</span>(x);</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l, r;</span><br><span class="line">		</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		</span><br><span class="line">		query.<span class="built_in">push_back</span>(&#123; l,r &#125;);</span><br><span class="line"> </span><br><span class="line">		alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">		alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">	alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());<span class="comment">//去重</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : add)<span class="comment">//把将要插入的数插进去</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = <span class="built_in">find</span>(item.first);</span><br><span class="line">		a[x] += item.second;</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//预处理前缀和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= alls.<span class="built_in">size</span>(); i++) s[i] += s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//处理询问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> item : query)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> l = <span class="built_in">find</span>(item.first), r = <span class="built_in">find</span>(item.second);</span><br><span class="line">		cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法训练 - 离散化 - 前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>算法训练|贪心|LeetCode122. 买卖股票的最佳时机 II</title>
    <url>/2025/09/07/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E8%B4%AA%E5%BF%83-LeetCode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-II/</url>
    <content><![CDATA[<h1 id="LeetCode-122-买卖股票的最佳时机-II"><a href="#LeetCode-122-买卖股票的最佳时机-II" class="headerlink" title="LeetCode 122. 买卖股票的最佳时机 II"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/">LeetCode 122. 买卖股票的最佳时机 II</a></h1><span id="more"></span>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p>
<p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p>
<p>返回 你能获得的 最大 利润 。<br>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [7,1,5,3,6,4]</span><br><span class="line">输出：7</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。</span><br><span class="line">     总利润为 4 + 3 = 7 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：4</span><br><span class="line">解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。</span><br><span class="line">     总利润为 4 。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p>这道题的动态规划解法不赘述了，贪心解法属实有一种惊喜的感觉，建议先思考十分钟再看题解，恍然大悟其中奥妙，有种做脑筋急转弯的既视感。</p>
<p>细致来说，这里的贪心属于分解（分层）思想。这种思想很重要，不管是自顶向下的架构原理还是笔者最近学习的计网结构，分解（分层）思想都是其中不可或缺的一环。这道题中，各位最容易想到的思路就是：一定要找到一个大的值，减去小的，但是又发现并不是最大减最小才会得到最高利润，于是又卡死了。</p>
<p>实际上，我们可以把大的值减小的值这个思路分解一下。举示例1为例：</p>
<p>买7出1可不可以？  不可以，因为利润是负值</p>
<p>买7出5可不可以？  不可以，因为利润是负值</p>
<p>其中买7出5时，<strong>可以分解</strong>，即买7出1，买1出5</p>
<p>什么意思呢？第 i 天买入第 j 天卖出，我们完全可以看作第 i 天买入，第 i+1 天卖出，再买入，第 i+2 天卖出……</p>
<p>那么我们就可以建一个数组，保存后一天减前一天所得的钱，然后从中进行舍弃负值</p>
<p>比如示例1，可以建立数组：-6  4  -7  3  -2</p>
<p>最大利润就是4+3&#x3D;7</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            result += <span class="built_in">max</span>(prices[i] - prices[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法训练 - 贪心</tag>
      </tags>
  </entry>
</search>
